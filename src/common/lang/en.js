export default {
  TopNav: {
    new: "New",
    edit: "Edit"
  },

  SetPaths: {
    name: "Keystore File Path",
    tips:
      "* This file path is used for saving your keystores, please keep it safely.",
    close: "Close",
    enter: "Enter"
  },

  wallets: {
    all: "All Wallet",
    common: "Common Wallet",
    shared: "Shared Wallet",
    temp: "TEMP",
    createCommonWallet: "Create Wallet",
    importCommonWallet: "Import Wallet",
    createSharedWallet: "Create Wallet",
    joinSharedWallet: "Join Wallet",
    ledger: "Ledger",
    comingSoon: "Coming soon..."
  },

  createJsonWallet: {
    create: "Create Common Wallet",
    basicInfo: "Basic info",
    label: "Name of Common Wallet",
    password: "Password",
    rePassword: "Repeat Password",
    next: "Next",
    cancel: "Cancel",
    back: "Back",
    details: "",
    confirmInfo: "Confirm info",
    labelN: "Label",
    addressN: "Address",
    pubKeyN: "Public Key",
    signatureSchemeN: "Signature Scheme",
    wif: "WIF",
    mnemonic: "Mnemonic",
    privateKey: "Private Key"
  },

  importJsonWallet: {
    create: "Import Common Wallet",
    basicInfo: "Basic info",
    label: "Name of Common Wallet",
    wif: "WIF",
    password: "Password",
    rePassword: "Repeat Password",
    next: "Import",
    cancel: "Cancel",
    back: "Back",
    details: "",
    confirmInfo: "Confirm info",
    mnemonic: "Please use space to separate the mnemonic words.",
    privateKey: "Private Key"
  },

  createSharedWallet: {
    basicInfo: "Basic info",
    copayers: "Copayers",
    processing: "Processing",
    label: "Name of Shared Wallet",
    copayers2_12: "Copayers(2-12)",
    address: "Address",
    inputPks: "Input 2 - 12 public keys' info",
    name: "Name",
    publicKey: "Public Key",
    add: "+ Add",
    next: "Next",
    cancel: "Cancel",
    back: "Back",
    importSharedWallet: "Import Shared Wallet",
    requiredSigNum: "Required Signature Number ",
    success: "Success",
    duplicateCreate: "The shared wallet is already existed.Please import it.",
    createFailed: "Failed. Please try later.",
    createSuccess: "Create shared wallet successfully.",
    create: "Create Shared Wallet"
  },

  importSharedWallet: {
    import: "Join Shared Wallet",
    basicInfo: "Basic info",
    inputPass: "Input password",
    importSuccess: "Success",
    inputAddress: "Address of Shared Wallet",
    search: "Search",
    name: "Shared Wallet Name",
    totalCopayerNumber: "Total number of copayers",
    requiredCopayerNumber: "Required number of copayers",
    allCopayers: "Address of all Copayers",
    noResult: "No result",
    address: "Address",
    chooseLocalWallet: "Select local wallet to join",
    localWalletInfo: "Local wallet detail",
    walletName: "Wallet Name",
    pk: "Public Key",
    next: "Next",
    cancel: "Cancel",
    back: "Back",
    join: "Join",
    inputPassword: "Enter password to join",
    joinBefore: "You have joined this wallet before.",
    success: "Joind shared wallet succeefully!",
    passwordError: "Password error.",
    sorry: "Sorry!",
    notFound: "The shared wallet you are looking for is not found."
  },

  sharedWalletHome: {
    send: "Send",
    receive: "Receive",
    claim: "Claim",
    rule: "Rule",
    copayers: "Copayers",
    pendingTx: "Pending Transactions",
    completedTx: "Completed Transactions",
    owners: "Owners",
    address: "Address",
    amount: "Amount",
    max: "MAX",
    to: "To",
    recipient: "Recipient Address",
    cancel: "Cancel",
    next: "Next",
    back: "Back",
    submit: "Submit",
    asset: "Asset",
    sponsor: "Sponsor",
    dragDecide: "Drag to decide sign sequence",
    fee: "Fee",
    inputPassword: "Input Password",
    inputPassToTransfer: "Input password to complete transfer",
    walletAddress: "Wallet Address",
    createTime: "Creation Time",
    balance: "Balance",
    confirmation: "Confirmation",
    agreeToSend: "I agreed to send assets",
    signSequence: "Sign sequence",
    sign: "Sign",
    checkMore: "Check More",
    publicKey: "Public Key"
  },

  commonWalletHome: {
    claimableOng: "Claimable ONG",
    unboundOng: "Unbound ONG",
    redeem: "Redeem",
    receive: "Receive",
    walletQrCode: "Wallet QR Code",
    walletAddress: "Wallet Address",
    publicKey: "Public Key"
  },

  setting: {
    name: "Setting",
    net: "Network",
    lang: "Language",
    testNet: "Test Net",
    mainNet: "Main Net",
    en: "English",
    zh: "Chinese",
    pathTit: "Path: ",
    path: "Save keystore file path",
    change: "Change"
  }
};
